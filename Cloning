Shallow Copy 

A obj1 = obj(old obj) One Object and 2 reference

public class CloningDemo 
{
	int i;
	int j;
    public static void main(String[] args) 
    {
    	Aat aat = new Aat();
    	aat.show();
    }
}

class Aat
{
	public void show()
	{
		CloningDemo  obj = new CloningDemo();
		obj.i =10;
		obj.j =20;
		
		CloningDemo  obj1 = obj;
		System.out.println(obj1.i);
		System.out.println(obj1.j);
	}
}


Deep Copy (2 objects 2 reference) copy individuals values
public class CloningDemo 
{
	int i;
	int j;
    public static void main(String[] args) 
    {
    	Aat aat = new Aat();
    	aat.show();
    }
}

class Aat
{
	public void show()
	{
		CloningDemo  obj = new CloningDemo();
		obj.i =10;
		obj.j =20;
		
		CloningDemo  obj1 = new CloningDemo();
		obj1.i = obj.i;
		obj1.j = obj.j;
	}
}


Cloning : /* Deep Copy but looks like Shallow Copy */
public class CloningDemo implements Cloneable
{
	int i;
	int j;
    public static void main(String[] args) throws CloneNotSupportedException 
    {
    	Aat aat = new Aat();
    	aat.show();
    }
    
	@Override
	public String toString() {
		return "CloningDemo [i=" + i + ", j=" + j + "]";
	}
	
	protected Object clone() throws CloneNotSupportedException
	{
		return super.clone();
	}
}
class Aat
{
	public void show() throws CloneNotSupportedException
	{
		CloningDemo  obj = new CloningDemo();
		obj.i = 10;
		obj.j = 20;
		
		CloningDemo  obj1 = (CloningDemo) obj.clone(); 
		obj.i = 30;
				
		System.out.println(obj);		
		System.out.println(obj1);		
		
	}
}
